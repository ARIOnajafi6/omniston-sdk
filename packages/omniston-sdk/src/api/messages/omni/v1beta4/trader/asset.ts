// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v5.27.3
// source: omni/v1beta4/trader/asset.proto

/* eslint-disable */
import { Address } from "../types/common";

export const protobufPackage = "omni.v1beta4";

/**
 * A composable condition that returned assets must fulfil.
 * TODO: At the moment condition is ignored and the service returns predefined list of assets
 * Condition query = 1;
 */
export interface QueryAssetsRequest {}

export interface AssetsResponse {
  assets: AssetInfo[];
}

/** Represents an asset */
export interface AssetInfo {
  /** Address of the asset in corresponding blockchain */
  address: Address | undefined;
  /** Asset tags */
  tags: string[];
  /** Asset symbol */
  symbol: string;
  /** Human-readable nam0e */
  name: string;
  /** URL to asset image */
  imageUrl: string;
  /** Number of decimal places used to represent fractional amounts of an asset */
  decimals: number;
  /** Additional metadata, excluding above fields */
  metadata: { [key: string]: string };
}

export interface AssetInfo_MetadataEntry {
  key: string;
  value: string;
}

function createBaseQueryAssetsRequest(): QueryAssetsRequest {
  return {};
}

export const QueryAssetsRequest = {
  fromJSON(_: any): QueryAssetsRequest {
    return {};
  },

  toJSON(_: QueryAssetsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAssetsRequest>, I>>(
    base?: I,
  ): QueryAssetsRequest {
    return QueryAssetsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAssetsRequest>, I>>(
    _: I,
  ): QueryAssetsRequest {
    const message = createBaseQueryAssetsRequest();
    return message;
  },
};

function createBaseAssetsResponse(): AssetsResponse {
  return { assets: [] };
}

export const AssetsResponse = {
  fromJSON(object: any): AssetsResponse {
    return {
      assets: globalThis.Array.isArray(object?.assets)
        ? object.assets.map((e: any) => AssetInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AssetsResponse): unknown {
    const obj: any = {};
    if (message.assets?.length) {
      obj.assets = message.assets.map((e) => AssetInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetsResponse>, I>>(
    base?: I,
  ): AssetsResponse {
    return AssetsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetsResponse>, I>>(
    object: I,
  ): AssetsResponse {
    const message = createBaseAssetsResponse();
    message.assets = object.assets?.map((e) => AssetInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAssetInfo(): AssetInfo {
  return {
    address: undefined,
    tags: [],
    symbol: "",
    name: "",
    imageUrl: "",
    decimals: 0,
    metadata: {},
  };
}

export const AssetInfo = {
  fromJSON(object: any): AssetInfo {
    return {
      address: isSet(object.address)
        ? Address.fromJSON(object.address)
        : undefined,
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => globalThis.String(e))
        : [],
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      imageUrl: isSet(object.image_url)
        ? globalThis.String(object.image_url)
        : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: AssetInfo): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.symbol !== undefined) {
      obj.symbol = message.symbol;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.imageUrl !== undefined) {
      obj.image_url = message.imageUrl;
    }
    if (message.decimals !== undefined) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetInfo>, I>>(base?: I): AssetInfo {
    return AssetInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetInfo>, I>>(
    object: I,
  ): AssetInfo {
    const message = createBaseAssetInfo();
    message.address =
      object.address !== undefined && object.address !== null
        ? Address.fromPartial(object.address)
        : undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.symbol = object.symbol ?? "";
    message.name = object.name ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.decimals = object.decimals ?? 0;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAssetInfo_MetadataEntry(): AssetInfo_MetadataEntry {
  return { key: "", value: "" };
}

export const AssetInfo_MetadataEntry = {
  fromJSON(object: any): AssetInfo_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AssetInfo_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssetInfo_MetadataEntry>, I>>(
    base?: I,
  ): AssetInfo_MetadataEntry {
    return AssetInfo_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssetInfo_MetadataEntry>, I>>(
    object: I,
  ): AssetInfo_MetadataEntry {
    const message = createBaseAssetInfo_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
