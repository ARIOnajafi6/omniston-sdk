// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v5.28.3
// source: omni/v1beta5/trader/transaction_builder.proto

/* eslint-disable */
import { Address } from "../types/common";
import { Quote } from "../types/quote";
import { TonTransaction } from "../types/transaction";

export const protobufPackage = "omni.v1beta5";

/** A request to generate unsigned transfer to initiate the trade. */
export interface BuildTransferRequest {
  /** The address on `offer_blockchain` that will send initial transaction to start the trade */
  sourceAddress: Address | undefined;
  /** The address on `ask_blockchain` that will receive result of the trade */
  destinationAddress: Address | undefined;
  /** The valid quote received from `QuoteGrpc` */
  quote: Quote | undefined;
  /** Max price slippage in basis points (0.01%) */
  maxSlippageBps: number;
}

export interface TransactionResponse {
  transaction: TransactionResponse_TransactionOneOf | undefined;
}

export interface TransactionResponse_TransactionOneOf {
  ton?: TonTransaction | undefined;
}

function createBaseBuildTransferRequest(): BuildTransferRequest {
  return {
    sourceAddress: undefined,
    destinationAddress: undefined,
    quote: undefined,
    maxSlippageBps: 0,
  };
}

export const BuildTransferRequest = {
  fromJSON(object: any): BuildTransferRequest {
    return {
      sourceAddress: isSet(object.source_address)
        ? Address.fromJSON(object.source_address)
        : undefined,
      destinationAddress: isSet(object.destination_address)
        ? Address.fromJSON(object.destination_address)
        : undefined,
      quote: isSet(object.quote) ? Quote.fromJSON(object.quote) : undefined,
      maxSlippageBps: isSet(object.max_slippage_bps)
        ? globalThis.Number(object.max_slippage_bps)
        : 0,
    };
  },

  toJSON(message: BuildTransferRequest): unknown {
    const obj: any = {};
    if (message.sourceAddress !== undefined) {
      obj.source_address = Address.toJSON(message.sourceAddress);
    }
    if (message.destinationAddress !== undefined) {
      obj.destination_address = Address.toJSON(message.destinationAddress);
    }
    if (message.quote !== undefined) {
      obj.quote = Quote.toJSON(message.quote);
    }
    if (message.maxSlippageBps !== undefined) {
      obj.max_slippage_bps = Math.round(message.maxSlippageBps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildTransferRequest>, I>>(
    base?: I,
  ): BuildTransferRequest {
    return BuildTransferRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildTransferRequest>, I>>(
    object: I,
  ): BuildTransferRequest {
    const message = createBaseBuildTransferRequest();
    message.sourceAddress =
      object.sourceAddress !== undefined && object.sourceAddress !== null
        ? Address.fromPartial(object.sourceAddress)
        : undefined;
    message.destinationAddress =
      object.destinationAddress !== undefined &&
      object.destinationAddress !== null
        ? Address.fromPartial(object.destinationAddress)
        : undefined;
    message.quote =
      object.quote !== undefined && object.quote !== null
        ? Quote.fromPartial(object.quote)
        : undefined;
    message.maxSlippageBps = object.maxSlippageBps ?? 0;
    return message;
  },
};

function createBaseTransactionResponse(): TransactionResponse {
  return { transaction: undefined };
}

export const TransactionResponse = {
  fromJSON(object: any): TransactionResponse {
    return {
      transaction: isSet(object.transaction)
        ? TransactionResponse_TransactionOneOf.fromJSON(object.transaction)
        : undefined,
    };
  },

  toJSON(message: TransactionResponse): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = TransactionResponse_TransactionOneOf.toJSON(
        message.transaction,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionResponse>, I>>(
    base?: I,
  ): TransactionResponse {
    return TransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionResponse>, I>>(
    object: I,
  ): TransactionResponse {
    const message = createBaseTransactionResponse();
    message.transaction =
      object.transaction !== undefined && object.transaction !== null
        ? TransactionResponse_TransactionOneOf.fromPartial(object.transaction)
        : undefined;
    return message;
  },
};

function createBaseTransactionResponse_TransactionOneOf(): TransactionResponse_TransactionOneOf {
  return { ton: undefined };
}

export const TransactionResponse_TransactionOneOf = {
  fromJSON(object: any): TransactionResponse_TransactionOneOf {
    return {
      ton: isSet(object.ton) ? TonTransaction.fromJSON(object.ton) : undefined,
    };
  },

  toJSON(message: TransactionResponse_TransactionOneOf): unknown {
    const obj: any = {};
    if (message.ton !== undefined) {
      obj.ton = TonTransaction.toJSON(message.ton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionResponse_TransactionOneOf>, I>>(
    base?: I,
  ): TransactionResponse_TransactionOneOf {
    return TransactionResponse_TransactionOneOf.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<TransactionResponse_TransactionOneOf>, I>,
  >(object: I): TransactionResponse_TransactionOneOf {
    const message = createBaseTransactionResponse_TransactionOneOf();
    message.ton =
      object.ton !== undefined && object.ton !== null
        ? TonTransaction.fromPartial(object.ton)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
